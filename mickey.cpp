#include <iostream>
using namespace std;

bool R[100], S[100];
bool Key[80] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
bool KeyStream[128];

bool COMP0[100] = {0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0};

bool COMP1[100] = {0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0};

bool FB0[100] = {1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0};

bool FB1[100] = {1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1};

const int IVlength = 32;
bool IV[IVlength] = {0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1};

int RTAPS[50] = {0, 1, 3, 4, 5, 6, 9, 12, 13, 16, 19, 20, 21, 22, 25, 28, 37, 38, 41, 42, 45, 46, 50, 52, 54, 56, 58, 60, 61, 63, 64, 65, 66, 67, 71, 72, 79, 80, 81, 82, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97};

bool TMP_R[100], TMP_S[100], ADD_S[100];
bool FB_R, FB_S, IB_R, CB_R, IB_S, CB_S, IB, MIXING;

int clock_r() {
  FB_R = R[99] ^ IB_R;

  for(int i=0; i<100; i++) {
    TMP_R[i] = R[i];
  }

  for(int i = 1; i < 100; i++) {
    R[i] = TMP_R[i-1];
  }
  R[0] = 0;

  for(int i = 0; i < 100; i++) {
    for(int j = 0; j < 50; j++) {
      if(i == RTAPS[j]) {
        R[i] = R[i] ^ FB_R;
      }
    }
  }

  if (CB_R) {
    for(int i = 0; i < 100; i++) {
      R[i] = R[i] ^ TMP_R[i];
    }
  }

  return 0;
}

int clock_s() {
  FB_S = S[99] ^ IB_S;

  for(int i=0; i<100; i++) {
    TMP_S[i] = S[i];
    ADD_S[i] = S[i];
  }

  for(int i = 1; i < 99; i++) {
    ADD_S[i] = TMP_S[i-1] ^ ((TMP_S[i] ^ COMP0[i]) & (TMP_S[i+1] ^ COMP1[i]));
  }
  ADD_S[0] = 0;
  ADD_S[99] = TMP_S[98];

  if (CB_S) {
    for(int i = 0; i < 100; i++) {
      S[i] = ADD_S[i] ^ (FB0[i] & FB_S);
    }
  } else {
    for(int i = 0; i < 100; i++) {
      S[i] = ADD_S[i] ^ (FB1[i] & FB_S);
    }
  }

  return 0;
}

int clock_kg() {
  CB_R = S[34] ^ R[67];
  CB_S = S[67] ^ R[33];

  if (MIXING) {
    IB_R = IB ^ S[50];
  } else {
    IB_R = IB;
  }

  IB_S = IB;

  clock_r();
  clock_s();

  return 0;
}

int print_keystream() {
  for(int i=0; i<128; i++) {
    cout << KeyStream[i] << ' ';
  }
  cout << endl;

  return 0;
}

int main() {
  for(int i = 0; i < 100; i++) {
    S[i] = 0;
    R[i] = 0;
  }

  for(int i=0; i < IVlength; i++) {
    IB = IV[i];
    MIXING = true;
    clock_kg();
  }

  for(int i=0; i < 80; i++) {
    IB = Key[i];
    MIXING = true;
    clock_kg();
  }

  for(int i=0; i < 100; i++) {
    IB = 0;
    MIXING = true;
    clock_kg();
  }

  for(int i=0; i < 128; i++) {
    KeyStream[i] = R[0] ^ S[0];
    IB = 0;
    MIXING = false;
    clock_kg();
  }

  print_keystream();

  return 0;
}
