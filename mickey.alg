__in bit Key[80];
__out bit KeyStream[128];

bit R[100];
bit S[100];

bit COMP0[100] = {0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0};
bit COMP1[100] = {0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0};
bit FB0[100] = {1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0};
bit FB1[100] = {1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1};

int IV[32] =  {0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1};
int IVlength = 32;

int RTAPS[50] = {0, 1, 3, 4, 5, 6, 9, 12, 13, 16, 19, 20, 21, 22, 25, 28, 37, 38, 41, 42, 45, 46, 50, 52, 54, 56, 58, 60, 61, 63, 64, 65, 66, 67, 71, 72, 79, 80, 81, 82, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97};

void clock_r(bit IB_R, bit CB_R) {
  bit FB_R = R[99] ^ IB_R;

  /* SAVING OLD R */
  bit TMP_R[100] = R;

  /* SHIFTING */
  for (int i = 1; i < 100; i = i + 1) {
    R[i] = R[i-1];
  }

  R[0] = 0;

  for (int i = 0; i < 100; i = i + 1) {
    for (int j = 0; j < 50; j = j + 1) {
      if (i == RTAPS[j]) {
        R[i] = R[i] ^ FB_R;
      }
    }
  }

  if (CB_R == 1) {
    for (int i = 0; i < 100; i = i + 1) {
      R[i] = R[i] ^ TMP_R[i];
    }
  }
}

void clock_s(bit IB_S, bit CB_R) {
  bit FB_S = S[99] ^ IB_S;

  /* SAVING OLD R */
  bit TMP_S[100] = S;
  bit ADD_S[100] = S;

  for (int i = 1; i < 99; i = i + 1) {
    ADD_S[i] = S[i-1] ^ ((S[i] ^ COMP0[i]) & (S[i+1] ^ COMP1[i]));
    ADD_S[0] = 0;
    ADD_S[99] = S[98];
  }

  if (CB_S == 0) {
    for(int i = 0; i < 100; i = i + 1) {
      S[i] = ADD_S[i] ^ (FB0[i] & FB_S);
    }
  } else {
    for(int i = 0; i < 100; i = i + 1) {
      S[i] = ADD_S[i] ^ (FB1[i] & FB_S);
    }
  }
}

void clock_kg(bit MIXING, bit IB) {
  bit CB_R = S[34] ^ R[67];
  bit CB_S = S[67] ^ R[33];
  bit IB_R;
  bit IB_S;

  if (MIXING == 1) {
    IB_R = IB ^ S[50];
  } else {
    IB_R = IB;
  }

  IB_S = IB;

  clock_r(IB_R, CB_R);
  clock_s(IB_S, CB_S);
}

void main() {

  /*Initializing*/

  for (int i=0; i<13; i = i + 1) {
    R[i] = 0;
    S[i] = 0;
  }

  for (int i=0; i < IVlength; i = i + 1) {
    clock_kg(1, IV[i]);
  }

  for (int i=0; i < 80; i = i + 1) {
    clock_kg(1, Key[i]);
  }
  
  for (int i=0; i < 100; i = i + 1) {
    clock_kg(1, 0);
  }

  /*ENCODER*/
  for(int i = 0; i < 128; i = i + 1) {
    KeyStream[i] = R[0] ^ S[0];
    clock_kg(0, 0);
  }

}
